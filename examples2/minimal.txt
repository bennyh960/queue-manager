import { resizeImage, sendEmail, type HandlerMap } from './methods.js';

const fileRepo = new FileQueueRepository<Task<HandlerMap>>('./tasks2.json');

const sendEmail = async ({ email }: { email: string }) => {
  console.log(`Sending email to ${email}`); // Simulate email sending
  return { success: true, email: email };
};

const resizeImage = async (payload: { imageUrl: string }) => {
  console.log(`Resizing image at ${payload.imageUrl}`); // Simulate image resizing
  return { success: true, imageUrl: payload.imageUrl };
};
type HandlerMap = {
  sendEmail: typeof sendEmail;
  resizeImage: typeof resizeImage;
};

const run = async () => {
  const queue = QueueManager.getInstance<HandlerMap>({ backend: { type: 'file', filePath: 'tasks.json' } });

  queue.register('sendEmail', sendEmail, { maxRetries: 3, maxProcessingTime: 2000 });
  queue.register('resizeImage', resizeImage);

  await queue.addTaskToQueue('sendEmail', { email: 'sda@sc.com' });
  await queue.addTaskToQueue('sendEmail', { email: 'ben2@sc.com' });
  await queue.addTaskToQueue('resizeImage', { imageUrl: 'http://example.com/image.jpg' });

  console.log(queue.inspectHandler('sendEmail'));
  queue.startWorker();
};

run();
