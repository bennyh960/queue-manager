// Code Generated by Sidekick is for learning and experimentation purposes only.
type HandlerOptions = {
  maxRetries?: number;
  maxProcessingTime?: number;
};

type HandlerWithOptions = {
  fn: (payload: any) => any;
  options?: HandlerOptions;
};

export class HandlerRegistry<H extends Record<string, (payload: Object) => any>> {
  private readonly handlers = new Map<string, HandlerWithOptions>();

  register<K extends keyof H>(name: K, fn: H[K], options?: HandlerOptions) {
    this.handlers.set(name as string, { fn, options });
  }

  get(name: string): HandlerWithOptions | undefined {
    return this.handlers.get(name);
  }
}
